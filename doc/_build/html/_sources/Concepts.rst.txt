##########
Selectors
##########

Basic Selectors
################

Selectors are objects that if applied to a dataset yield a set of instances. If an instance is retured from a selector we say that the selectors covers that instance. The pysubgroup package provides two basic selectors: The EqualitySelector and the IntervalSelector.
Lets start by exploring the EqualitySelector:

.. code:: python

    import pysubgroup as ps
    import pandas as pd

    # create dataset
    first_names = ['Alex', 'Anna', 'Alex']
    sur_names = ['Smith', 'Johnson', 'Williams']
    ages =  [40, 25, 32]
    df = pd.DataFrame.from_dict({'First_name':first_names, 'sur_name': sur_names, 'age':ages})

    # create selector
    alex_selector = pd.EqualitySelector('First_name', 'Alex')
    age_selector = pd.EqualitySelector('age', '22')
    # apply selectors to dataframe
    print('instances with ', str(alex_selector), alex_selector.covers(df))
    print('instances with', str(age_selector), age_selector.covers(df))

The output of the above code is :code:`instances with first_name=Alex [True, False, True]` which indicates that the first and third instance in the dataset have a first name that is equal to :code:`'Alex'`.
The second output is :code:`instances with age=22 [False, False, False]` which shows that None of the instances in our dataset are of age 22.
The EqualitySelector selector can be used on many different datatypes, but is most useful on binary, string and categorical data.
In addition to the EqualitySelector the pysubgroup package also provides the IntervalSelector. The following codes selects all instances from the database, which are in the age range 18 (included) to 40 (excluded).

.. code:: python

    interval_selector = pd.IntervalSelector('age', 18, 40)
    print(age_selector.covers(df))

The code above produces the output :code:`[False, True, True]` showing that the second and third instance in our dataset have an age within the interval :math:`[18,40)`.

Selectors are the building block of all rules generated with the pysubgroup package. If you want to write your own custom selector that is not a problem see TODO for references.

Negations
----------

TODO

Conjunctions
-------------

Most of the rules that are generated with the pysubgroup package use conjunctions to form more complex queries. Continuing the running example from above we can find all persons whose name is Alex and which have an age in the interval :math:`[18,40)` like so:

.. code:: python

    conj = ps.Conjunction([interval_selector, alex_selector])
    print('instances with', str(conj), conj.covers(df))

:code:`instances with age in [18,40[ and name='Alex' [False, False, True]` which shows that only the last instance is covered by our conjunction.


Disjunctions
-------------

The pysubgroup package also provides disjunctions with the :code:`Disjunction` class. Continuing the running example we can find all persons whose name is Alex *or* which have an age in the interval :math:`[18,40)` like so:

.. code:: python

    disj = ps.Disjunction([interval_selector, alex_selector])
    print('instances with', str(disj), disj.covers(df))

:code:`instances with age in [18,40[ or name='Alex' [True, True, True]` which shows that all of our instances either have a first name that is equal to Alex or have an age in the interval :math:`[18,40)`.